Toda variavel e um objeto no python.

print('Ola, mundo!') --> vai escrever exatamente o texto que eu escrevi
print(7 + 4) --> vai somar os numeros
print('7' + '4') --> vai escrever '74'

E preciso colocar o tipo primitivo (inteiro, float, bool, str) da variavel, depois do =. Ai a variavel e lida pelo tipo dela.
Ex: int = 7, -4, 0
    float = 4.5, 0.076, -15.223, 7.0
    bool = True or False
    str = 'Ola', '7.0' (precisa estar entre aspas)

n1 = int(input('Digite um numero'))

Operadores aritmeticos:
+ - * / **(potencia) //(quociente da divisao) %(resto da divisao) 

Ordem de precedencia
()
**
* / // %
+ -

n1 = int(input('Digite um valor: '))
n2 = int(input('Digite outro valor: '))
s = n1 + n2
m = n1 * n2
d = n1 / n2
di = n1 // n2
e = n1 ** n2
print('A soma e '.format(n1+n2))

Usar o .format:
print('A soma entre {} e {} eh {}'.format(nome das variaveis separados or virgula))
{:.3f} (o float vai aparecer com 3 casas flutuantes)
, end = ' ' nao quebrar a linha depois do format

Quebra de linha: \n
Fazer comentario: #

import + bibliotecas (importar modulos)
from biblioteca import = importa um item especifico, nao a biblioeca inteira

Fatiamento de string
O PYTHON CONTA ATE UM NUMERO ANTES DO NUMERO FINAL
frase[9] (vai ver onde esta o caracter 9)
frase[9:21] (vai ver os caracteres entre 9 e 21)
frase[9:21:2] (vai ver os caracteres entre 9 e 21, pulando de 2 em 2)
frase[:5] (vai do inicio ate o caracter 4)
frase[5:] (vai do caracter 5 ate o final)
frase[9::3] (vai do 9 ate o final, pulando de 3 em 30
len(frase) (vai dizer a quantidade de caracteres de uma frase)
frase.count('o') (conta quantas vezes o o minusculo aparece na frase)
frase.count('o', 0, 13) (faz a contagem com o fatiamento)
frase.find('deo') (vai mostrar a posicao onde comeca as letras)
Se colocar uma string que nao existe, vai retonar um valor -1
'Curso' in frase (ele vai escrever true ou false)
frase.replace('Python', 'Android') (vai substituir a primeira string pela segunda)
frase.upper() (ele vai colocar o que esta em minuscula, em maiuscula)
frase.lower() (substitui as maisculas para minusculas)
frase.capitalize() (so o primeiro caracter fica em maisculo)
frase.title() (analisa quantas palavras tem na string (conta os espacos), colocando todas as palavras com a primeira letra em maiuscula)
frase.strip() (remove excesso de espacos, no inicio e final de estrings, mantendo os do meio)
frase.rstrip() (remove os ultimos espacos, os da direita)
frase.lstrip (remove os espacos da esquerda, os primeiros espacos)
frase.split() (divisao da string, considerando os espacos, gera uma lista com as palavras de cadeia de caracter)
'-'.join(frase) (coloca tracinhos nos espacos entre strings)

Colocar cor no python
\033[m => entre o colchete e o m vc coloca 0, 1, 2, 3 codigos - estilo, texto e fundo
Ex: \033[0;33;44m

Codigos para estilo: 0(nada), 1(negrito), 4(sublinhado), 7(inverter as configuracoes)
Codigos para texto: 30(brando), 31(vermelho), 32(verde), 33(amarelo), 34(azul), 35(roxo), 36(ciano), 37(cinza)
Codigos para fundo: 40 a 47 (mesma ordem das cores para texto)

elif = else if

laco de repeticao == iteracao

while = usado para estrutura sem limite de repeticao
for = usado para estrutura com limite de repeticao

Comando break = interrompe o looping infinito
Para fazer um looping infinito = while True

O python tem 3 tipos de variaveis compostas:
Tuplas ()
Listas []
dicionarios

Exemplos de fatiamento:
variavel[2]: mostrar a variavel que ocupa a posicao 2
variavel[0:2]: mostra ate a posicao 2 (exluindo o 2)
variavel[1:]: comeca no 1 ate o final
variavel[-1]: e o final da variavel composta que vai de 0 a 4
len(variavel): vai dizer qts variaveis tem

As tuplas sao imutaveis

Pode haver dados de tipos diferentes nas tuplas.

Para deletar: del(tupla) mas apaga ela toda

Listas sao usadas para guardar mais de uma variavel (variaveis compostas), mas sao mutaveis.
Para adicionar um novo elemento .append
Para adicionar un novo elemento em determinada posicao .insert(0, 'nome da variavel') - vai ser inserido na posicao 0
Para apagar elemento del nomedalista[posicao] ou nome dalista.pop(posicao) - se nao colocar a posicao, vai remover o ultimo elemento, nomeda lista.remove(valor)
nomedalista.sort() = coloca os elementos em ordem crescente
nomedalista.sort(reverse=True) = coloca os elementos em ordem decrescente
len(variavel): vai dizer qts variaveis tem

O python faz uma ligacao entre as listas, entao mexer em uma, mexe na outra. Pra mudar uma e nao mudar outra, tem que criar uma copia. nomeda lista[:]

Lista dentro de lista:
Ex: pessoas = list()
    pessoas.append(dados[:])
Como declarar:
pessoas = [['Pedro', 25], ['Maria', 19], ['Joao', 32]]
print(pessoas[0][0]) = Vai printar Pedro
print(pessoas[1][1]) = Vai printar 19
print(pessoas[1]) = Vai printar ['Maria', 19]

Dicionarios: estruturalmente semelhante a tuplas e listas, mas os indices podem ser literais, ou seja, e possivel, personalizar os indices.
Exemplo:
dados = dict()
dados = {'nome': 'Pedro', 'idade': 25}
O append nao funciona nos dicionarios
Para adcionar:
dados['sexo] = 'M'
Para remover: deldados['Nome do indice']
print(nomedicionario.values()) retorna tds os valores
print(nomedicionario.keys()) retorna os indices
print(nomedicionario.items()) retorna os valores e os indices

def = definir funcoes
Cria funcoes personalizadas e parametros

Interactive help (ajuda interativa) = help()
	Digitar help() no console do python ou colocar help(nome da funcao) no display

Para fazer uma docstring tem que colocar o manual entre tres aspas duplas

Parametros opcionais = utilizados para flexibilizar as funcoes

escopo de variaveis: local onde a variavel vai ou nao vai mais existir

Modularizacao = construir modulos, para dividir um programa grande e aumentar a legibilidade, o que facilita a manuntencao do sistema
